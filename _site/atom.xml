<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Uncle Chen</title>
 <link href="http://unclechen.github.io/atom.xml" rel="self"/>
 <link href="http://unclechen.github.io/"/>
 <updated>2015-01-31T23:43:32+08:00</updated>
 <id>http://unclechen.github.io</id>
 <author>
   <name>Chen Xihong</name>
   <email></email>
 </author>

 
 <entry>
   <title>使用Jekyll渲染GitHub Pages个人博客</title>
   <link href="http://unclechen.github.io/2015/01/31/%E4%BD%BF%E7%94%A8Jekyll%E6%B8%B2%E6%9F%93GitHub%20Pages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
   <updated>2015-01-31T00:00:00+08:00</updated>
   <id>http://unclechen.github.io/2015/01/31/使用Jekyll渲染GitHub Pages个人博客</id>
   <content type="html">&lt;p&gt;上一篇文章介绍了&lt;a href=&quot;http://unclechen.github.io/2015/01/14/%E4%BD%BF%E7%94%A8Github%20Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&quot;&gt;使用GitHub Pages搭建个人博客&lt;/a&gt; ，这次介绍一下GitHub Pages官方推荐的模板Jekyll渲染博客的页面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如discuz。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。下面我主要参考&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;官方网站的指导&lt;/a&gt;来介绍安装Jekyll的步骤，首先还是以MAC为例，介绍安装的步骤。再以Win7为例，介绍我自己碰到的一些问题和解决办法。&lt;/p&gt;

&lt;h1 id=&quot;mac-os-xjekyll&quot;&gt;Mac OS X的Jekyll安装步骤&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;一. 安装前的准备&lt;/h2&gt;

&lt;p&gt;将之前在GitHub上创建的仓库&lt;code&gt;username.github.io&lt;/code&gt;clone到本地。进入&lt;code&gt;master&lt;/code&gt;分支。如前一篇博客介绍到的，如果你使用的不是&lt;code&gt;username&lt;/code&gt;为前缀的这类型&lt;strong&gt;个人/组织主页&lt;/strong&gt;（&lt;strong&gt;User or organization site&lt;/strong&gt;），而是&lt;strong&gt;个人/组织主页&lt;/strong&gt;（&lt;strong&gt;User or organization site&lt;/strong&gt;）和&lt;strong&gt;项目仓库&lt;/strong&gt;（&lt;strong&gt;Project site&lt;/strong&gt;），那么clone到本地后，需要checkout到&lt;code&gt;gh-pages&lt;/code&gt;分支。关于这两种博客站点的差异，在前一篇文章&lt;a href=&quot;http://unclechen.github.io/2015/01/14/%E4%BD%BF%E7%94%A8Github%20Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&quot;&gt;使用GitHub Pages搭建个人博客&lt;/a&gt; 中有详细的介绍，不再赘述了。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;二. 安装Jekyll&lt;/h2&gt;

&lt;p&gt;建议大家都在自己的电脑上安装Jekyll，这样就可以在本地启动一个server来预览自己的博客网站，而不是每一次修改一些博客文章都要commit到GitHub上面再来看看我们的页面是否满意。&lt;/p&gt;

&lt;p&gt;为了安装Jekyll，我们需要进行下面3个步骤：&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;安装Ruby环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll的运行需要Ruby的支持，所以我们在Mac上打开终端，输入命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;ruby --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看自己的ruby版本，一般Mac上都预装了Ruby的。我们需要保证的自己的Ruby版本是1.9.3或者是2.0.0，这样就可以进入第二步了，否则请先安装Ruby。&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;安装Bundler管理器&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bundler是一个包管理器，如果你想要在本地环境中预览GitHub Pages页面，Bundler可以使得基于Ruby环境的Jekyll管理起来更加简单。安装了这个管理器之后，我们就可以使用&lt;code&gt;bundler&lt;/code&gt;命令来安装和管理Jekyll。&lt;/p&gt;

&lt;p&gt;安装Bundler的命令是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;gem install bundler&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里&lt;code&gt;gem&lt;/code&gt;相当于Linux下的&lt;code&gt;yum&lt;/code&gt;之类的命令，是Ruby提供的。&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;安装Jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是最关键的一步，首先在当前仓库中新建一个名为&lt;code&gt;Gemfile&lt;/code&gt;的文件，在其中添加两行：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;source ‘https://ruby.taobao.org’&lt;br /&gt;
gem ‘github-pages’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意到这里的&lt;code&gt;source&lt;/code&gt;，我们需要改成国内比较快的地址，即&lt;strong&gt;淘宝的Ruby镜像&lt;/strong&gt;&lt;a href=&quot;https://ruby.taobao.org&quot;&gt;https://ruby.taobao.org&lt;/a&gt;，至于原因呢，大家都懂得。&lt;/p&gt;

&lt;p&gt;然后输入命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;系统就会给你哗哗哗装上一堆依赖的软件，这样Jekyll就算安装好了，文件夹下也多了一个&lt;code&gt;Gemfile.lock&lt;/code&gt;文件。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-1&quot;&gt;三. 运行Jekyll&lt;/h2&gt;

&lt;p&gt;安装完了Bundle以后，在命令行输入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就可以在本地将Jekyll跑起来了，这时你可以通过访问 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; 来预览你的GitHub Pages。&lt;/p&gt;

&lt;p&gt;到这里已经完成了Jekyll的安装和本地预览。根据我的经验，其实在MAC下安装起来真的是非常顺利，仅仅就是按照官方的指定的步骤执行，没有碰到什么问题。如果还有其他的一些需求，诸如更新或者关闭Jekyll啥的，可以参考官方的&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;help&lt;/a&gt;页面。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;jekyll-2&quot;&gt;Jekyll的文档结构&lt;/h1&gt;

&lt;p&gt;在介绍windows下的Jekyll安装步骤前，简单介绍一下Jekyll模板的文档结构。&lt;/p&gt;

&lt;p&gt;在GitHub Pages站点中，使用Jekyll模板以后，就会看到文件夹的结构如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/jekyll-structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他们各自的作用分别为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;_config.yml：这个文件是为了保存一些公共的配置，可以保存很多公共的字段，这些字段在站点的任何页面都可以直接引用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_includes：这个文件夹里存放的是可以重复利用的文件。这个文件可以被其他的文件包含，重复利用，如一些公共的&lt;strong&gt;css&lt;/strong&gt;文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_layouts：这个文件夹存放的是一些公共的&lt;strong&gt;html&lt;/strong&gt;模板文件。通常我们都会有三个文件，分别是&lt;code&gt;default.html&lt;/code&gt;，&lt;code&gt;page.html&lt;/code&gt;，&lt;code&gt;post.html&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_posts：这个文件夹存放的就是实际的文章了。一般我们写完博客后，把一个个的markdown文件丢到这里就好了。文件名必须使用YEAR-MONTH-DATE-title.markdown的格式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_site：这个文件夹存放的是最终生成的文件。一般可以不把这个文件夹commit到GitHub上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CNAME：这个文件就是自定义域名的文件了，将你自己的购买的&lt;strong&gt;域名&lt;/strong&gt;，例如&lt;code&gt;uncle.chen.me&lt;/code&gt;保存在里面就ok了。这样以后就可以通过&lt;code&gt;uncle.chen.me&lt;/code&gt;来访问自己的博客了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;剩下还有一些文件，如错误页面文件&lt;code&gt;404.html&lt;/code&gt;，&lt;code&gt;README.md&lt;/code&gt;，这些都是常见的文件，大家肯定都知道的。至于&lt;code&gt;public&lt;/code&gt;和&lt;code&gt;content&lt;/code&gt;文件夹是我自己建立的文件夹，大家可以忽略了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;windowsjekyll&quot;&gt;Windows下的Jekyll安装步骤&lt;/h1&gt;

&lt;p&gt;好了，介绍了完了Mac下的Jekyll安装，我们搞搞Win7的Jekyll安装。相信很多人都和我一样，除了自己买台MAC玩，公司很多时候都会给你配备一台Windows系统的电脑，唉。。谁让咱是Android的RD呢，人家做ios都是发台iMac啊！！好了，言归正传，开始配置。&lt;/p&gt;

&lt;p&gt;其实在Windows下安装，也是按照官网的页面来的，不过我结合自己的情况，讲一讲遇到的一些问题，给大家参考一下。说明一下，我在Windows下使用的终端还是&lt;code&gt;git bash&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一. 安装前准备&lt;/h2&gt;

&lt;p&gt;1.&lt;strong&gt;安装Ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还是Ruby，Mac下自带Ruby，Windows下我们只好自己安装了。不多说，使用&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;Ruby Installers&lt;/a&gt;上面的新版就好，注意得是新版。因为新版的Ruby自带&lt;code&gt;Gem&lt;/code&gt;，我们前面说了&lt;code&gt;Gem&lt;/code&gt;就相当于Linux中的&lt;code&gt;yum&lt;/code&gt;，方便我们进行软件包的安装和管理。这里我的Ruby版本是2.1。&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;安装Devkit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个Devkit需要和Ruby的版本对应起来，同样可以在&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;Ruby Installers&lt;/a&gt;下载。&lt;/p&gt;

&lt;p&gt;下载好了以后，解压到一个目录，例如我的是&lt;code&gt;C:\Devkit&lt;/code&gt;。在git bash终端或者cmd中输入命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;ruby dk.rb init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;初始化。然后再输入命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;ruby dk.rb install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;进行安装。这里有的同学可能会遇到问题，安装失败并提示你需要修复&lt;code&gt;config.yml&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这是因为下载过来的Devkit无法自动识别我们的Ruby安装目录，需要我们在&lt;code&gt;config.yml&lt;/code&gt;种指定，因此我们在&lt;code&gt;C:\Devkit&lt;/code&gt;中打开&lt;code&gt;config.yml&lt;/code&gt;文件，增加一行：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;-C:/Ruby21-x64&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是我的Ruby安装目录，大家将它修改成自己的安装目录即可。&lt;/p&gt;

&lt;p&gt;这样，windows下的安装准备工作算是完成了。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-3&quot;&gt;二. Jekyll的安装&lt;/h2&gt;

&lt;p&gt;1.&lt;strong&gt;安装Bundler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;同样，在windows下面也需要安装Bundler管理器，输入同样的命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;gem install bundler&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此时如果你顺利安装成功的话，那就恭喜了！但是我遇到了问题。。首先&lt;code&gt;gem install bundler&lt;/code&gt;默认的源是官方的源，身处天朝的我们都懂吧。所以我们还是将Ruby的源换成淘宝的镜像比较好。&lt;/p&gt;

&lt;p&gt;使用命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;gem sources -a https://ruby.taobao.org/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就好了。&lt;/p&gt;

&lt;p&gt;这里，我遇到了两问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;其一，我的终端里面提示错误&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“ERROR:  While executing gem … (Encoding::UndefinedConversionError)&lt;br /&gt;
U+7CFB to IBM437 in conversion from UTF-16LE to UTF-8 to IBM437”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这可能是我脑残的修改了&lt;code&gt;git bash&lt;/code&gt;终端的编码和字体，解决办法是参考&lt;a href=&quot;https://github.com/rubygems/rubygems/issues/1025&quot;&gt;https://github.com/rubygems/rubygems/issues/1025&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所以按照这个帖子的解决方法，我修改了Ruby的源码文件&lt;code&gt;registry.rb&lt;/code&gt;，在自己的Ruby安装目录下找到这个文件。例如我的是&lt;code&gt;C:\Ruby21-x64\lib\ruby\2.1.0\win32\registry.rb&lt;/code&gt;，然后找到这一行：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LOCALE = Encoding.find(Encoding.locale_charmap)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;修改成：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LOCALE = Encoding::UTF_8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样第一个错误就修复了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;其二，当身处公司内网时，&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error fetching http://ruby.taobao.org/:Errno::ETIMEDOUT: A connection attempt failed because the connected part&lt;br /&gt;
y did not properly respond after a period of time, or established connection fai&lt;br /&gt;
led because connected host has failed to respond. - connect(2) for “ruby.taobao.&lt;br /&gt;
org” port 80 (http://ruby.taobao.org/specs.4.8.gz)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此需要在上的命令后面加上代理，如&lt;code&gt;gem sources -a https://ruby.taobao.org/ -p http://proxy.tencent.com:8080&lt;/code&gt;，第二个错误就修复了。&lt;/p&gt;

&lt;p&gt;关于设置代理，其实还应该这样做，在终端中输入命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;export http_proxy=&amp;#39;http://proxy.tencent.com:8080&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.&lt;strong&gt;安装Jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;安装完Bundler以后，我们也同时设置好了源和公司内网代理，让我们开始安装&lt;code&gt;Jekyll&lt;/code&gt;吧。和在Mac下一样，首先也是新建一个名为&lt;code&gt;Gemfile&lt;/code&gt;的文件，并在其中添加：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;source ‘https://ruby.taobao.org’&lt;br /&gt;
gem ‘github-pages’ &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;保存该文件，然后在终端中输入命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这时系统也是哗啦哗啦地安装了一堆依赖包，这样我们的Jekyll就安装好了，可以看到文件夹下面多了一个&lt;code&gt;Gemfile.lock&lt;/code&gt;文件。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-4&quot;&gt;三. Jekyll的运行&lt;/h2&gt;

&lt;p&gt;安装完了Bundle以后，在命令行输入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就可以在本地将Jekyll跑起来了，这时你可以通过访问 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; 来预览你的GitHub Pages。&lt;/p&gt;

&lt;p&gt;到这里就在Windows下完成了Jekyll的安装和本地预览，可以看到在Windows下我还是遇到一些小问题的，不够总的来说还是比较简单的。毕竟做了这些配置以后，我只需要把自己的的markdown文件丢到&lt;code&gt;_post&lt;/code&gt;文件夹下，commit到GitHub上，就发布成功了，后续的博文编辑工作就很轻松了。&lt;/p&gt;

&lt;p&gt;这样我们就完成了Jekyll模板的安装，可以看到渲染之后的博客页面变得好看了很多，可以安心的开始博文的编写工作了。但是我们还可以为自己的博客添加一些好看的主题和评论系统，例如我的博客主题就是&lt;a href=&quot;http://hyde.getpoole.com/&quot;&gt;Hyde&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用GitHub Pages搭建博客</title>
   <link href="http://unclechen.github.io/2015/01/14/%E4%BD%BF%E7%94%A8Github%20Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
   <updated>2015-01-14T00:00:00+08:00</updated>
   <id>http://unclechen.github.io/2015/01/14/使用Github Pages搭建个人博客</id>
   <content type="html">&lt;p&gt;新的一年开始，一定要做点美好的事情。&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 是一个开源项目的托管网站，相信很多人都听过。在上面有很多高质量的项目代码，我们也可以把自己的项目代码托管到GitHub，与朋友们共享交流。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; 是Github为大家提供的一项服务，不仅能为托管的项目建立主页，还可以为我们建立个人博客。下面我就介绍个人博客是如何建立的，这里我们先假设大家已经了解Git一些基本使用，将来我也会发布另外一篇&lt;a href=&quot;http://&quot;&gt;《Git基本安装和使用教程》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在使用GitHub Pages建立个人博客前，我们象征性地了解一下GitHub Pages建立的页面有哪些优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;极简的配置，轻量级系统，无需数据库&lt;/li&gt;
  &lt;li&gt;使用标记语言，如Markdown&lt;/li&gt;
  &lt;li&gt;使用GitHub托管服务，免费300MB空间&lt;/li&gt;
  &lt;li&gt;可以绑定自己的域名&lt;/li&gt;
  &lt;li&gt;新版的GitHub Pages还支持CDN服务，提升访问速度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要说缺点的话，其实也有一些：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt; 模板系统，属于静态页面。&lt;/li&gt;
  &lt;li&gt;基于Git操作，需要有一定的动手能力。&lt;/li&gt;
  &lt;li&gt;动态性不好，没有评论系统，不过可以自己配置&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; 扩展。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总体来说，GitHub Pages搭建的博客使用起来是非常方便的。配置好了之后，只需要使用例如Markdown编写自己的博文，扔到指定的文件夹里即可发布了。完全不需要管理网站相关的事务，例如数据库、安全性等问题。&lt;/p&gt;

&lt;p&gt;开始正题，下面的操作步骤参考自&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;的主页，再结合我的实际操作介绍各个步骤，并说一下可能遇到的问题和解决办法。&lt;/p&gt;

&lt;p&gt;首先说明下面是以Window 7环境为例的，至于OS X，我操作的时候感觉还更方便一些。。另外我采用的是Git Bash终端来操作，这在任何环境下都是一样的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;搭建步骤&lt;/h1&gt;

&lt;h2 id=&quot;create-a-repository&quot;&gt;1. 创建一个新仓库 （Create a repository）&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/create-a-repository.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，登录自己的GitHub主页，从右上角新建一个仓库，仓库名（&lt;strong&gt;Repository name&lt;/strong&gt;）设置为你自己的用户名为前缀，例如我的是&lt;code&gt;unclechen.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在GitHub上，每个用户只允许拥有唯一的一个以自己的username为前缀，名为&lt;code&gt;username.github.io&lt;/code&gt;的仓库。这个仓库也就是Github Pages说的&lt;strong&gt;个人/组织主页&lt;/strong&gt;（&lt;strong&gt;User or organization site&lt;/strong&gt;），另一种则是&lt;strong&gt;项目仓库&lt;/strong&gt;（&lt;strong&gt;Project site&lt;/strong&gt;）。因此当我再次想要建立一个同样名字的仓库时，上图中显示我的账号下已存在同名的仓库了。假如你没有建立过的话，是没有问题的。&lt;/p&gt;

&lt;h2 id=&quot;clone-the-repository&quot;&gt;2. 把仓库拉到本地 （Clone the repository）&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/clone-the-repository.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用任何一种方式将刚才建立的仓库拉取到本地。如上图所示，我喜欢使用Git Bash终端，在Git Bash中输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;git clone git@github.com:unclechen/unclechen.github.io.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;即可将刚才建立的仓库拉取到本地。&lt;/p&gt;

&lt;h2 id=&quot;indexhtml-hello-world&quot;&gt;3. 建立index.html文件 （Hello World）&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/create-index.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，继续在Git Bash中输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;cd unclechen.github.io/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;命令，进入刚才拉取的仓库（&lt;strong&gt;记住&lt;/strong&gt;你应该将上面的&lt;code&gt;unclechen&lt;/code&gt;改成自己的&lt;code&gt;username&lt;/code&gt;）。然后在Git Bash中继续输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;echo &amp;quot;Hello World&amp;quot; &amp;gt; index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;命令，在本地先创建index.html文件。&lt;/p&gt;

&lt;h2 id=&quot;github-commit-the-file&quot;&gt;4. 提交到GitHub服务器 （Commit the file）&lt;/h2&gt;

&lt;p&gt;创建index.html文件后，和使用其他Git仓库的基本操作一样，需要提交修改到服务器才能生效。&lt;/p&gt;

&lt;p&gt;所以我们需要依次输入三条Git命令，第一条是&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;git add .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二条是&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;git commit -a -m &amp;quot;my fisrt blog&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第三条是&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样就把刚才建立的&lt;code&gt;index.html&lt;/code&gt;文件提交到了GitHub服务器上，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/push-to-github.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-youre-done&quot;&gt;5. 搭建成功 （…and you’re done!）&lt;/h2&gt;

&lt;p&gt;好了！Push到GitHub之后，你就打开浏览器在地址栏输入&lt;code&gt;http://username.github.io/&lt;/code&gt;来访问你的个人主页了，别忘了将&lt;code&gt;username&lt;/code&gt;改成你自己的用户名。记住，页面初次打开可能会显示404错误。这没有关系，因为需要等待一些时间之后才会生效，我的博客是过了大概10分钟左右生效的吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/and-you-are-done.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，页面显然有点朴素。没有关系，我们先将博客创建出来，再使用基于&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt; 模板的一些主题，就可以渲染界面。我的博客用的主题是&lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;至此，我们已经成功使用&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;搭建了个人博客（通过&lt;strong&gt;User or organization site&lt;/strong&gt;方式）。至于如何使用Jekyll模板编写，并使用主题来渲染博客，以及绑定自己的域名等等，在我的另一篇博客中&lt;a href=&quot;http://&quot;&gt;《使用Jekyll渲染GitHub Pages个人博客》&lt;/a&gt;将会介绍。&lt;/p&gt;

&lt;p&gt;下面介绍的是另外一种使用GitHub Pages中的&lt;strong&gt;Project site&lt;/strong&gt;建立博客的方法，有兴趣或者需要建立多个博客站点的朋友可以看一看。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-1&quot;&gt;另一种搭建方法（可搭建多个博客站点）&lt;/h1&gt;

&lt;p&gt;上面介绍了使用&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;中提到的&lt;strong&gt;个人/组织主页&lt;/strong&gt;（&lt;strong&gt;User or organization site&lt;/strong&gt;）来搭建个人博客，前面说过这种名为&lt;code&gt;username.github.io&lt;/code&gt;的仓库，每个GitHub账户下只能拥有一个，如果你需要建立多个博客站点的话多少有些不方便。&lt;/p&gt;

&lt;p&gt;不过没有关系，除了通过建立名为&lt;code&gt;username.github.io&lt;/code&gt;的仓库搭建个人博客以外，还可以通过建立普通名字&lt;code&gt;project name&lt;/code&gt;的仓库来创建个人博客。这就是GitHub Pages上提到的&lt;strong&gt;项目仓库&lt;/strong&gt;（&lt;strong&gt;Project site&lt;/strong&gt;）。&lt;/p&gt;

&lt;p&gt;然而，使用&lt;strong&gt;项目仓库&lt;/strong&gt;（&lt;strong&gt;Project site&lt;/strong&gt;）创建博客又分为两种场景，一种是通过新建一个仓库（&lt;strong&gt;Generate a site&lt;/strong&gt;）来创建，另一种则是直接从已有的项目仓库（&lt;strong&gt;Start from scratch&lt;/strong&gt;）来创建。但这两种形式本质上都是通过在一个普通的仓库下开辟一个没有父分支的gh-pages分支，将网页的代码在gh-pages分下进行管理，维护页面的。acth）。但是这两种形式本质上都是通过在一个普通的仓库下开辟一个没有父分支的gh-pages分支，将网页的代码在gh-pages分下进行管理，维护页面的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一种场景：使用&lt;strong&gt;Generate a site&lt;/strong&gt;搭建博客。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-repository-1&quot;&gt;1. 创建新仓库（Create a repository）&lt;/h2&gt;

&lt;p&gt;这里我们就不再使用&lt;code&gt;username.github.io&lt;/code&gt;的名字来建立仓库了，随便使用一个其他的名字，例如&lt;code&gt;blog&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;repository-settings&quot;&gt;2. 设置仓库的参数 （Repository Settings）&lt;/h2&gt;

&lt;p&gt;进入刚才建立的新仓库，在GitHub网页的右边面板中点击&lt;code&gt;Settings&lt;/code&gt;。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/settings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;automatic-generator&quot;&gt;3. 自动生成页面 （Automatic Generator）&lt;/h2&gt;

&lt;p&gt;在Settings界面下，选择下图所示的&lt;code&gt;Automatic page generator&lt;/code&gt;按钮，在弹出的页面填写一些参数。再选择一个主题，可以自动生成一个页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/atomatic-page-generator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-youre-done-1&quot;&gt;4. 搭建完成 （…and you’re done!）&lt;/h2&gt;

&lt;p&gt;在浏览器中输入&lt;code&gt;http://username.github.io/repository&lt;/code&gt;，即可访问页面。记住，你需要将前面的&lt;code&gt;repository&lt;/code&gt;修改成你的项目名字（&lt;code&gt;project name&lt;/code&gt;，例如我的是&lt;code&gt;blog&lt;/code&gt;）。同样这需要等待一些时间之后才能生效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/you-are-done-again.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们就成功使用&lt;strong&gt;Generate a site&lt;/strong&gt;的形式，新建立一个仓库，搭建了自己的博客。如下所示，使用GitHub自动生成的页面比刚才的”Hello World”页面确实漂亮了不少。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第二种场景：使用&lt;strong&gt;Start from scratch&lt;/strong&gt;搭建博客。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gh-pages-create-a-gh-pages-branch&quot;&gt;1. 创建gh-pages分支 （Create a gh-pages branch）&lt;/h2&gt;

&lt;p&gt;进入已有仓库的主页，在分支下拉菜单中输入&lt;code&gt;gh-pages&lt;/code&gt;后，按下回车键&lt;code&gt;enter&lt;/code&gt;，自定建立一个没有父分支的gh-pages分支，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/create-gh-pages-branch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可选操作：创建&lt;code&gt;gh-pages&lt;/code&gt;分支后，也可以将这个分支设为默认分支（&lt;code&gt;default branch&lt;/code&gt;），将来方便我们自己管理。&lt;/p&gt;

&lt;h2 id=&quot;indexhtml-create-an-index-file&quot;&gt;2. 建立index.html文件 （Create an index file）&lt;/h2&gt;

&lt;p&gt;和上面介绍过的方法一样，在&lt;code&gt;gh-pages&lt;/code&gt;分支下面建立一个&lt;code&gt;index.html&lt;/code&gt;文件，输入&lt;code&gt;Hello World&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;commit-the-file&quot;&gt;3. 提交修改 （Commit the file）&lt;/h2&gt;

&lt;p&gt;建立了&lt;code&gt;index.html&lt;/code&gt;文件之后，将修改commit到服务器上。&lt;/p&gt;

&lt;p&gt;这里的第2、3步都可以在GitHub网站的界面直接进行操作，或者和&lt;strong&gt;User or organization site&lt;/strong&gt;方法的第3、4步一样，也可以使用Git Bash终端操作。&lt;/p&gt;

&lt;h2 id=&quot;and-youre-done-2&quot;&gt;4. 搭建成功 （…and you’re done!）&lt;/h2&gt;

&lt;p&gt;等待片刻，博客页面生效。&lt;/p&gt;

&lt;p&gt;至此，我们就成功使用&lt;strong&gt;Start from scratch&lt;/strong&gt;的方式，通过在已有的仓库下建立没有父分支的&lt;code&gt;gh-pages&lt;/code&gt;分支，搭建了自己的博客。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-2&quot;&gt;两种搭建方法的对比&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;User or organization site:&lt;/strong&gt; 使用&lt;code&gt;master&lt;/code&gt;分支管理博客站点，命名为&lt;code&gt;username.github.io&lt;/code&gt;的形式，每个GItHub账户下只能拥有一个。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Project site:&lt;/strong&gt; 采用一个没有父分支的&lt;code&gt;gh-pages&lt;/code&gt;来管理博客站点，命名方式普通，每个GitHub账户下可以有多个。&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 

</feed>
